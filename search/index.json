[{"content":"Export采集指标的地址谁都可以访问，这里可以使用基础认证使用用户名密码方式去采集被监控端，也就是访问接口使用用户名密码提高安全性\n配置被监控端 这个配置文件里面是要访问我暴露的指标需要的用户名密码\n用户名和密码，密码是采用了一定的加密方式的，而不是写明文\n生成密码\n[root@localhost ~]# yum install httpd-tools –y 下面就是输入123456之后加密的密码，将这个密码保存在配置文件当中\n[root@localhost ~]# htpasswd -nBC 12 \u0026#39;\u0026#39; | tr -d \u0026#39;:\\\\\\\\n\u0026#39; New password: Re-type new password: $2y$12$y4PaNc0UM0Jzi07jJf6zcuRFyp2GlH6F5rUKcE.xk3Aug2khcqa7m 修改其配置文件\n[root@localhost node_exporter]# vim config.yml [root@localhost node_exporter]# cat config.yml basic_auth_users: prometheus: $2y$12$y4PaNc0UM0Jzi07jJf6zcuRFyp2GlH6F5rUKcE.xk3Aug2khcqa7m 现在让export引用这个配置文件\n[root@localhost node_exporter]# vim /usr/lib/systemd/system/node_exporter.service ExecStart=/usr/local/node_exporter/node_exporter --web.config=/usr/local/node_exporter/config.yml [root@localhost node_exporter]# systemctl daemon-reload [root@localhost node_exporter]# systemctl restart node_exporter 输入prometheus加上密码123456\n同时现在普罗米修斯没有配置，可以看到采集不了数据了\n配置普罗米修斯 启用用户名密码访问\n[root@localhost prometheus]# vim /usr/local/prometheus/prometheus.yml - job_name: \u0026#39;webserver\u0026#39; basic_auth: username: prometheus password: 123456 static_configs: - targets: [\u0026#39;192.168.179.99:9100\u0026#39;,\u0026#39;192.168.179.102:9100\u0026#39;] [root@localhost prometheus]# ./promtool check config prometheus.yml Checking prometheus.yml SUCCESS: 0 rule files found 可以看到数据可以正常采集了\n","date":"2022-10-20T09:52:48+08:00","permalink":"https://zefrawendi.github.io/p/node_exporter_password/","title":"为NodeExport配置访问密码"},{"content":"服务配置 启动： systemctl start firewalld.service 查看状态： systemctl status firewalld.service 停止： systemctl disable firewalld.service 禁用： systemctl stop firewalld.service 三种策略 ACCEPT 允许 REJECT 拒绝 DROP 丢弃 1. 查看 # 查看激活的域 firewall-cmd --get-active-zones # 查看开放的端口 firewall-cmd --zone=public --list-ports # 查看开放的服务 firewall-cmd --zone=public --list-services # 查看添加的规则 firewall-cmd --zone=public --list-rich-rules 2. 添加端口 常用命令 #开放单个端口 firewall-cmd --zone=public --add-port=80/tcp --permanent # 开放端口范围 firewall-cmd --zone=public --add-port=8388-8389/tcp --permanent # 对 147.152.139.197 开放10000端口 firewall-cmd --permanent --add-rich-rule=\u0026#34;rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;147.152.139.197/32\u0026#34; port protocol=\u0026#34;tcp\u0026#34; port=\u0026#34;10000\u0026#34; accept\u0026#34; # 拒绝端口： firewall-cmd --permanent --zone=public --add-rich-rule=\u0026#39; rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;47.52.39.197/32\u0026#34; port protocol=\u0026#34;tcp\u0026#34; port=\u0026#34;10000\u0026#34; reject\u0026#39; # 开放全部端口给IP firewall-cmd --permanent --zone=public --add-rich-rule=\u0026#39; rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;192.168.0.1/32\u0026#34; accept\u0026#39; # 开放全部端口给网段 firewall-cmd --permanent --zone=public --add-rich-rule=\u0026#39; rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;192.168.0.0/16\u0026#34; accept\u0026#39; 3. 添加服务 # 查看全部支持的服务 firewall-cmd --get-service # 查看开放的服务 firewall-cmd --list-service # 添加服务,添加https firewall-cmd --add-service=https --permanent # 修改对应的配置文件是/etc/firewalld/zones/public.xml 4. 移除端口 # 移除添加的端口(其它的增加的策略也是将add改为remove即可) firewall-cmd --zone=public --remove-port=80/tcp --permanent 5. 重载配置 # 对路由规则进行修改后，需要重新加载规则才能使规则生效 firewall-cmd --reload 实战应用 (1)限制ssh访问，仅允许白名单IP登录 也可以通过在/etc/host.deny里面配置来实现\n# 取消默认开启的没有访问限制的ssh服务，让ssh服务默认情况下拒绝连接 firewall-cmd --permanent --remove-service=ssh # 允许特定ip或ip段访问22端口的ssh服务 firewall-cmd --permanent --add-rich-rule=\u0026#39;rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;192.168.1.0/24\u0026#34; port protocol=\u0026#34;tcp\u0026#34; port=\u0026#34;22\u0026#34; accept\u0026#39; # 重载firewall配置，使其生效 firewall-cmd --reload ","date":"2022-10-20T09:45:48+08:00","permalink":"https://zefrawendi.github.io/p/firewalld/","title":"防火墙配置"},{"content":"用于美化表格，列表，进度条，文本等的控制台输出\njedib0t/go-pretty: Table-writer and more in golang! (github.com)\ntable 可以在输出美化的表格\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/jedib0t/go-pretty/v6/table\u0026#34; ) type Student struct { ID int Name string Age int School string } var students = []Student{ {ID: 1, Name: \u0026#34;张三\u0026#34;, Age: 18, School: \u0026#34;清华大学\u0026#34;}, {ID: 2, Name: \u0026#34;李四\u0026#34;, Age: 19, School: \u0026#34;北京大学\u0026#34;}, {ID: 3, Name: \u0026#34;王五\u0026#34;, Age: 20, School: \u0026#34;复旦大学\u0026#34;}, {ID: 4, Name: \u0026#34;赵六\u0026#34;, Age: 21, School: \u0026#34;上海交通大学\u0026#34;}, } func (s Student) toRow() table.Row { return table.Row{s.ID, s.Name, s.Age, s.School} } func main() { t := table.NewWriter() t.SetOutputMirror(os.Stdout) t.AppendHeader(table.Row{\u0026#34;ID\u0026#34;, \u0026#34;姓名\u0026#34;, \u0026#34;年龄\u0026#34;, \u0026#34;学校\u0026#34;}) for _, s := range students { t.AppendRow(s.toRow()) } t.SetStyle(table.StyleColoredDark) t.Render() } 运行可以在终端中得到\nRender同时也支持渲染html、csv等\u0026hellip;\n","date":"2022-10-19T15:44:48+08:00","permalink":"https://zefrawendi.github.io/p/go-pretty/","title":"Go Pretty"}]